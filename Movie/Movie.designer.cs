#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Movie
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="movie")]
	public partial class MovieDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertaccount(account instance);
    partial void Updateaccount(account instance);
    partial void Deleteaccount(account instance);
    partial void Insertcategory_movie(category_movie instance);
    partial void Updatecategory_movie(category_movie instance);
    partial void Deletecategory_movie(category_movie instance);
    partial void Insertformat_movie(format_movie instance);
    partial void Updateformat_movie(format_movie instance);
    partial void Deleteformat_movie(format_movie instance);
    partial void Insertslot_show(slot_show instance);
    partial void Updateslot_show(slot_show instance);
    partial void Deleteslot_show(slot_show instance);
    partial void Insertbill_food_detail(bill_food_detail instance);
    partial void Updatebill_food_detail(bill_food_detail instance);
    partial void Deletebill_food_detail(bill_food_detail instance);
    partial void Insertcate_food(cate_food instance);
    partial void Updatecate_food(cate_food instance);
    partial void Deletecate_food(cate_food instance);
    partial void Insertfood(food instance);
    partial void Updatefood(food instance);
    partial void Deletefood(food instance);
    partial void Insertfood_detail(food_detail instance);
    partial void Updatefood_detail(food_detail instance);
    partial void Deletefood_detail(food_detail instance);
    partial void Insertsize_food(size_food instance);
    partial void Updatesize_food(size_food instance);
    partial void Deletesize_food(size_food instance);
    partial void Insertbill_food(bill_food instance);
    partial void Updatebill_food(bill_food instance);
    partial void Deletebill_food(bill_food instance);
    partial void Insertmovie(movie instance);
    partial void Updatemovie(movie instance);
    partial void Deletemovie(movie instance);
    partial void Insertcinema_room(cinema_room instance);
    partial void Updatecinema_room(cinema_room instance);
    partial void Deletecinema_room(cinema_room instance);
    partial void Insertcategory_seat(category_seat instance);
    partial void Updatecategory_seat(category_seat instance);
    partial void Deletecategory_seat(category_seat instance);
    partial void Insertticket_sale(ticket_sale instance);
    partial void Updateticket_sale(ticket_sale instance);
    partial void Deleteticket_sale(ticket_sale instance);
    #endregion
		
		public MovieDataContext() : 
				base(global::Movie.Properties.Settings.Default.movieConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MovieDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MovieDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MovieDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MovieDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<account> accounts
		{
			get
			{
				return this.GetTable<account>();
			}
		}
		
		public System.Data.Linq.Table<category_movie> category_movies
		{
			get
			{
				return this.GetTable<category_movie>();
			}
		}
		
		public System.Data.Linq.Table<format_movie> format_movies
		{
			get
			{
				return this.GetTable<format_movie>();
			}
		}
		
		public System.Data.Linq.Table<slot_show> slot_shows
		{
			get
			{
				return this.GetTable<slot_show>();
			}
		}
		
		public System.Data.Linq.Table<bill_food_detail> bill_food_details
		{
			get
			{
				return this.GetTable<bill_food_detail>();
			}
		}
		
		public System.Data.Linq.Table<cate_food> cate_foods
		{
			get
			{
				return this.GetTable<cate_food>();
			}
		}
		
		public System.Data.Linq.Table<food> foods
		{
			get
			{
				return this.GetTable<food>();
			}
		}
		
		public System.Data.Linq.Table<food_detail> food_details
		{
			get
			{
				return this.GetTable<food_detail>();
			}
		}
		
		public System.Data.Linq.Table<size_food> size_foods
		{
			get
			{
				return this.GetTable<size_food>();
			}
		}
		
		public System.Data.Linq.Table<bill_food> bill_foods
		{
			get
			{
				return this.GetTable<bill_food>();
			}
		}
		
		public System.Data.Linq.Table<movie> movies
		{
			get
			{
				return this.GetTable<movie>();
			}
		}
		
		public System.Data.Linq.Table<cinema_room> cinema_rooms
		{
			get
			{
				return this.GetTable<cinema_room>();
			}
		}
		
		public System.Data.Linq.Table<category_seat> category_seats
		{
			get
			{
				return this.GetTable<category_seat>();
			}
		}
		
		public System.Data.Linq.Table<ticket_sale> ticket_sales
		{
			get
			{
				return this.GetTable<ticket_sale>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.p_tkTicketByYear")]
		public ISingleResult<p_tkTicketByYearResult> p_tkTicketByYear([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> year)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), year);
			return ((ISingleResult<p_tkTicketByYearResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.p_tkFoodbyYear")]
		public ISingleResult<p_tkFoodbyYearResult> p_tkFoodbyYear([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> year)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), year);
			return ((ISingleResult<p_tkFoodbyYearResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.account")]
	public partial class account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name_user;
		
		private string _Name_show;
		
		private string _Password;
		
		private System.Nullable<int> _Type;
		
		private EntitySet<bill_food> _bill_foods;
		
		private EntitySet<ticket_sale> _ticket_sales;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnName_userChanging(string value);
    partial void OnName_userChanged();
    partial void OnName_showChanging(string value);
    partial void OnName_showChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    #endregion
		
		public account()
		{
			this._bill_foods = new EntitySet<bill_food>(new Action<bill_food>(this.attach_bill_foods), new Action<bill_food>(this.detach_bill_foods));
			this._ticket_sales = new EntitySet<ticket_sale>(new Action<ticket_sale>(this.attach_ticket_sales), new Action<ticket_sale>(this.detach_ticket_sales));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name_user", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name_user
		{
			get
			{
				return this._Name_user;
			}
			set
			{
				if ((this._Name_user != value))
				{
					this.OnName_userChanging(value);
					this.SendPropertyChanging();
					this._Name_user = value;
					this.SendPropertyChanged("Name_user");
					this.OnName_userChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name_show", DbType="NVarChar(50)")]
		public string Name_show
		{
			get
			{
				return this._Name_show;
			}
			set
			{
				if ((this._Name_show != value))
				{
					this.OnName_showChanging(value);
					this.SendPropertyChanging();
					this._Name_show = value;
					this.SendPropertyChanged("Name_show");
					this.OnName_showChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int")]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="account_bill_food", Storage="_bill_foods", ThisKey="Name_user", OtherKey="Account_id")]
		public EntitySet<bill_food> bill_foods
		{
			get
			{
				return this._bill_foods;
			}
			set
			{
				this._bill_foods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="account_ticket_sale", Storage="_ticket_sales", ThisKey="Name_user", OtherKey="Account_id")]
		public EntitySet<ticket_sale> ticket_sales
		{
			get
			{
				return this._ticket_sales;
			}
			set
			{
				this._ticket_sales.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_bill_foods(bill_food entity)
		{
			this.SendPropertyChanging();
			entity.account = this;
		}
		
		private void detach_bill_foods(bill_food entity)
		{
			this.SendPropertyChanging();
			entity.account = null;
		}
		
		private void attach_ticket_sales(ticket_sale entity)
		{
			this.SendPropertyChanging();
			entity.account = this;
		}
		
		private void detach_ticket_sales(ticket_sale entity)
		{
			this.SendPropertyChanging();
			entity.account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.category_movie")]
	public partial class category_movie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<movie> _movies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public category_movie()
		{
			this._movies = new EntitySet<movie>(new Action<movie>(this.attach_movies), new Action<movie>(this.detach_movies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="category_movie_movie", Storage="_movies", ThisKey="Id", OtherKey="Category_movie_id")]
		public EntitySet<movie> movies
		{
			get
			{
				return this._movies;
			}
			set
			{
				this._movies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_movies(movie entity)
		{
			this.SendPropertyChanging();
			entity.category_movie = this;
		}
		
		private void detach_movies(movie entity)
		{
			this.SendPropertyChanging();
			entity.category_movie = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.format_movie")]
	public partial class format_movie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<double> _Price;
		
		private EntitySet<slot_show> _slot_shows;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPriceChanging(System.Nullable<double> value);
    partial void OnPriceChanged();
    #endregion
		
		public format_movie()
		{
			this._slot_shows = new EntitySet<slot_show>(new Action<slot_show>(this.attach_slot_shows), new Action<slot_show>(this.detach_slot_shows));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float")]
		public System.Nullable<double> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="format_movie_slot_show", Storage="_slot_shows", ThisKey="Id", OtherKey="Format_movie_id")]
		public EntitySet<slot_show> slot_shows
		{
			get
			{
				return this._slot_shows;
			}
			set
			{
				this._slot_shows.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_slot_shows(slot_show entity)
		{
			this.SendPropertyChanging();
			entity.format_movie = this;
		}
		
		private void detach_slot_shows(slot_show entity)
		{
			this.SendPropertyChanging();
			entity.format_movie = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.slot_show")]
	public partial class slot_show : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.TimeSpan _Start_time;
		
		private System.Nullable<System.TimeSpan> _End_time;
		
		private System.DateTime _Day_show;
		
		private System.Nullable<int> _Movie_id;
		
		private System.Nullable<int> _Cinema_room_id;
		
		private System.Nullable<int> _Format_movie_id;
		
		private EntitySet<ticket_sale> _ticket_sales;
		
		private EntityRef<format_movie> _format_movie;
		
		private EntityRef<movie> _movie;
		
		private EntityRef<cinema_room> _cinema_room;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStart_timeChanging(System.TimeSpan value);
    partial void OnStart_timeChanged();
    partial void OnEnd_timeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnEnd_timeChanged();
    partial void OnDay_showChanging(System.DateTime value);
    partial void OnDay_showChanged();
    partial void OnMovie_idChanging(System.Nullable<int> value);
    partial void OnMovie_idChanged();
    partial void OnCinema_room_idChanging(System.Nullable<int> value);
    partial void OnCinema_room_idChanged();
    partial void OnFormat_movie_idChanging(System.Nullable<int> value);
    partial void OnFormat_movie_idChanged();
    #endregion
		
		public slot_show()
		{
			this._ticket_sales = new EntitySet<ticket_sale>(new Action<ticket_sale>(this.attach_ticket_sales), new Action<ticket_sale>(this.detach_ticket_sales));
			this._format_movie = default(EntityRef<format_movie>);
			this._movie = default(EntityRef<movie>);
			this._cinema_room = default(EntityRef<cinema_room>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Start_time", DbType="Time NOT NULL")]
		public System.TimeSpan Start_time
		{
			get
			{
				return this._Start_time;
			}
			set
			{
				if ((this._Start_time != value))
				{
					this.OnStart_timeChanging(value);
					this.SendPropertyChanging();
					this._Start_time = value;
					this.SendPropertyChanged("Start_time");
					this.OnStart_timeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_End_time", DbType="Time")]
		public System.Nullable<System.TimeSpan> End_time
		{
			get
			{
				return this._End_time;
			}
			set
			{
				if ((this._End_time != value))
				{
					this.OnEnd_timeChanging(value);
					this.SendPropertyChanging();
					this._End_time = value;
					this.SendPropertyChanged("End_time");
					this.OnEnd_timeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Day_show", DbType="Date NOT NULL")]
		public System.DateTime Day_show
		{
			get
			{
				return this._Day_show;
			}
			set
			{
				if ((this._Day_show != value))
				{
					this.OnDay_showChanging(value);
					this.SendPropertyChanging();
					this._Day_show = value;
					this.SendPropertyChanged("Day_show");
					this.OnDay_showChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Movie_id", DbType="Int")]
		public System.Nullable<int> Movie_id
		{
			get
			{
				return this._Movie_id;
			}
			set
			{
				if ((this._Movie_id != value))
				{
					if (this._movie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMovie_idChanging(value);
					this.SendPropertyChanging();
					this._Movie_id = value;
					this.SendPropertyChanged("Movie_id");
					this.OnMovie_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cinema_room_id", DbType="Int")]
		public System.Nullable<int> Cinema_room_id
		{
			get
			{
				return this._Cinema_room_id;
			}
			set
			{
				if ((this._Cinema_room_id != value))
				{
					if (this._cinema_room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCinema_room_idChanging(value);
					this.SendPropertyChanging();
					this._Cinema_room_id = value;
					this.SendPropertyChanged("Cinema_room_id");
					this.OnCinema_room_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Format_movie_id", DbType="Int")]
		public System.Nullable<int> Format_movie_id
		{
			get
			{
				return this._Format_movie_id;
			}
			set
			{
				if ((this._Format_movie_id != value))
				{
					if (this._format_movie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormat_movie_idChanging(value);
					this.SendPropertyChanging();
					this._Format_movie_id = value;
					this.SendPropertyChanged("Format_movie_id");
					this.OnFormat_movie_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="slot_show_ticket_sale", Storage="_ticket_sales", ThisKey="Id", OtherKey="Slot_show_id")]
		public EntitySet<ticket_sale> ticket_sales
		{
			get
			{
				return this._ticket_sales;
			}
			set
			{
				this._ticket_sales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="format_movie_slot_show", Storage="_format_movie", ThisKey="Format_movie_id", OtherKey="Id", IsForeignKey=true)]
		public format_movie format_movie
		{
			get
			{
				return this._format_movie.Entity;
			}
			set
			{
				format_movie previousValue = this._format_movie.Entity;
				if (((previousValue != value) 
							|| (this._format_movie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._format_movie.Entity = null;
						previousValue.slot_shows.Remove(this);
					}
					this._format_movie.Entity = value;
					if ((value != null))
					{
						value.slot_shows.Add(this);
						this._Format_movie_id = value.Id;
					}
					else
					{
						this._Format_movie_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("format_movie");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="movie_slot_show", Storage="_movie", ThisKey="Movie_id", OtherKey="Id", IsForeignKey=true)]
		public movie movie
		{
			get
			{
				return this._movie.Entity;
			}
			set
			{
				movie previousValue = this._movie.Entity;
				if (((previousValue != value) 
							|| (this._movie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._movie.Entity = null;
						previousValue.slot_shows.Remove(this);
					}
					this._movie.Entity = value;
					if ((value != null))
					{
						value.slot_shows.Add(this);
						this._Movie_id = value.Id;
					}
					else
					{
						this._Movie_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("movie");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cinema_room_slot_show", Storage="_cinema_room", ThisKey="Cinema_room_id", OtherKey="Id", IsForeignKey=true)]
		public cinema_room cinema_room
		{
			get
			{
				return this._cinema_room.Entity;
			}
			set
			{
				cinema_room previousValue = this._cinema_room.Entity;
				if (((previousValue != value) 
							|| (this._cinema_room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._cinema_room.Entity = null;
						previousValue.slot_shows.Remove(this);
					}
					this._cinema_room.Entity = value;
					if ((value != null))
					{
						value.slot_shows.Add(this);
						this._Cinema_room_id = value.Id;
					}
					else
					{
						this._Cinema_room_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("cinema_room");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ticket_sales(ticket_sale entity)
		{
			this.SendPropertyChanging();
			entity.slot_show = this;
		}
		
		private void detach_ticket_sales(ticket_sale entity)
		{
			this.SendPropertyChanging();
			entity.slot_show = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.bill_food_detail")]
	public partial class bill_food_detail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<double> _Total_price;
		
		private System.Nullable<int> _Bill_food_id;
		
		private System.Nullable<int> _Food_detail_id;
		
		private EntityRef<food_detail> _food_detail;
		
		private EntityRef<bill_food> _bill_food;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnTotal_priceChanging(System.Nullable<double> value);
    partial void OnTotal_priceChanged();
    partial void OnBill_food_idChanging(System.Nullable<int> value);
    partial void OnBill_food_idChanged();
    partial void OnFood_detail_idChanging(System.Nullable<int> value);
    partial void OnFood_detail_idChanged();
    #endregion
		
		public bill_food_detail()
		{
			this._food_detail = default(EntityRef<food_detail>);
			this._bill_food = default(EntityRef<bill_food>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total_price", DbType="Float")]
		public System.Nullable<double> Total_price
		{
			get
			{
				return this._Total_price;
			}
			set
			{
				if ((this._Total_price != value))
				{
					this.OnTotal_priceChanging(value);
					this.SendPropertyChanging();
					this._Total_price = value;
					this.SendPropertyChanged("Total_price");
					this.OnTotal_priceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bill_food_id", DbType="Int")]
		public System.Nullable<int> Bill_food_id
		{
			get
			{
				return this._Bill_food_id;
			}
			set
			{
				if ((this._Bill_food_id != value))
				{
					if (this._bill_food.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBill_food_idChanging(value);
					this.SendPropertyChanging();
					this._Bill_food_id = value;
					this.SendPropertyChanged("Bill_food_id");
					this.OnBill_food_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Food_detail_id", DbType="Int")]
		public System.Nullable<int> Food_detail_id
		{
			get
			{
				return this._Food_detail_id;
			}
			set
			{
				if ((this._Food_detail_id != value))
				{
					if (this._food_detail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFood_detail_idChanging(value);
					this.SendPropertyChanging();
					this._Food_detail_id = value;
					this.SendPropertyChanged("Food_detail_id");
					this.OnFood_detail_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="food_detail_bill_food_detail", Storage="_food_detail", ThisKey="Food_detail_id", OtherKey="Id", IsForeignKey=true)]
		public food_detail food_detail
		{
			get
			{
				return this._food_detail.Entity;
			}
			set
			{
				food_detail previousValue = this._food_detail.Entity;
				if (((previousValue != value) 
							|| (this._food_detail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._food_detail.Entity = null;
						previousValue.bill_food_details.Remove(this);
					}
					this._food_detail.Entity = value;
					if ((value != null))
					{
						value.bill_food_details.Add(this);
						this._Food_detail_id = value.Id;
					}
					else
					{
						this._Food_detail_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("food_detail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="bill_food_bill_food_detail", Storage="_bill_food", ThisKey="Bill_food_id", OtherKey="Id", IsForeignKey=true)]
		public bill_food bill_food
		{
			get
			{
				return this._bill_food.Entity;
			}
			set
			{
				bill_food previousValue = this._bill_food.Entity;
				if (((previousValue != value) 
							|| (this._bill_food.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._bill_food.Entity = null;
						previousValue.bill_food_details.Remove(this);
					}
					this._bill_food.Entity = value;
					if ((value != null))
					{
						value.bill_food_details.Add(this);
						this._Bill_food_id = value.Id;
					}
					else
					{
						this._Bill_food_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("bill_food");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.cate_food")]
	public partial class cate_food : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<food> _foods;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public cate_food()
		{
			this._foods = new EntitySet<food>(new Action<food>(this.attach_foods), new Action<food>(this.detach_foods));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cate_food_food", Storage="_foods", ThisKey="Id", OtherKey="Cate_food_id")]
		public EntitySet<food> foods
		{
			get
			{
				return this._foods;
			}
			set
			{
				this._foods.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_foods(food entity)
		{
			this.SendPropertyChanging();
			entity.cate_food = this;
		}
		
		private void detach_foods(food entity)
		{
			this.SendPropertyChanging();
			entity.cate_food = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.food")]
	public partial class food : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<int> _Status;
		
		private System.Nullable<int> _Cate_food_id;
		
		private EntitySet<food_detail> _food_details;
		
		private EntityRef<cate_food> _cate_food;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnCate_food_idChanging(System.Nullable<int> value);
    partial void OnCate_food_idChanged();
    #endregion
		
		public food()
		{
			this._food_details = new EntitySet<food_detail>(new Action<food_detail>(this.attach_food_details), new Action<food_detail>(this.detach_food_details));
			this._cate_food = default(EntityRef<cate_food>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cate_food_id", DbType="Int")]
		public System.Nullable<int> Cate_food_id
		{
			get
			{
				return this._Cate_food_id;
			}
			set
			{
				if ((this._Cate_food_id != value))
				{
					if (this._cate_food.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCate_food_idChanging(value);
					this.SendPropertyChanging();
					this._Cate_food_id = value;
					this.SendPropertyChanged("Cate_food_id");
					this.OnCate_food_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="food_food_detail", Storage="_food_details", ThisKey="Id", OtherKey="Foot_id")]
		public EntitySet<food_detail> food_details
		{
			get
			{
				return this._food_details;
			}
			set
			{
				this._food_details.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cate_food_food", Storage="_cate_food", ThisKey="Cate_food_id", OtherKey="Id", IsForeignKey=true)]
		public cate_food cate_food
		{
			get
			{
				return this._cate_food.Entity;
			}
			set
			{
				cate_food previousValue = this._cate_food.Entity;
				if (((previousValue != value) 
							|| (this._cate_food.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._cate_food.Entity = null;
						previousValue.foods.Remove(this);
					}
					this._cate_food.Entity = value;
					if ((value != null))
					{
						value.foods.Add(this);
						this._Cate_food_id = value.Id;
					}
					else
					{
						this._Cate_food_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("cate_food");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_food_details(food_detail entity)
		{
			this.SendPropertyChanging();
			entity.food = this;
		}
		
		private void detach_food_details(food_detail entity)
		{
			this.SendPropertyChanging();
			entity.food = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.food_detail")]
	public partial class food_detail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<double> _Price;
		
		private System.Nullable<int> _Status;
		
		private System.Nullable<int> _Foot_id;
		
		private System.Nullable<int> _Size_food_id;
		
		private EntitySet<bill_food_detail> _bill_food_details;
		
		private EntityRef<food> _food;
		
		private EntityRef<size_food> _size_food;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPriceChanging(System.Nullable<double> value);
    partial void OnPriceChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnFoot_idChanging(System.Nullable<int> value);
    partial void OnFoot_idChanged();
    partial void OnSize_food_idChanging(System.Nullable<int> value);
    partial void OnSize_food_idChanged();
    #endregion
		
		public food_detail()
		{
			this._bill_food_details = new EntitySet<bill_food_detail>(new Action<bill_food_detail>(this.attach_bill_food_details), new Action<bill_food_detail>(this.detach_bill_food_details));
			this._food = default(EntityRef<food>);
			this._size_food = default(EntityRef<size_food>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float")]
		public System.Nullable<double> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Foot_id", DbType="Int")]
		public System.Nullable<int> Foot_id
		{
			get
			{
				return this._Foot_id;
			}
			set
			{
				if ((this._Foot_id != value))
				{
					if (this._food.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFoot_idChanging(value);
					this.SendPropertyChanging();
					this._Foot_id = value;
					this.SendPropertyChanged("Foot_id");
					this.OnFoot_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size_food_id", DbType="Int")]
		public System.Nullable<int> Size_food_id
		{
			get
			{
				return this._Size_food_id;
			}
			set
			{
				if ((this._Size_food_id != value))
				{
					if (this._size_food.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSize_food_idChanging(value);
					this.SendPropertyChanging();
					this._Size_food_id = value;
					this.SendPropertyChanged("Size_food_id");
					this.OnSize_food_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="food_detail_bill_food_detail", Storage="_bill_food_details", ThisKey="Id", OtherKey="Food_detail_id")]
		public EntitySet<bill_food_detail> bill_food_details
		{
			get
			{
				return this._bill_food_details;
			}
			set
			{
				this._bill_food_details.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="food_food_detail", Storage="_food", ThisKey="Foot_id", OtherKey="Id", IsForeignKey=true)]
		public food food
		{
			get
			{
				return this._food.Entity;
			}
			set
			{
				food previousValue = this._food.Entity;
				if (((previousValue != value) 
							|| (this._food.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._food.Entity = null;
						previousValue.food_details.Remove(this);
					}
					this._food.Entity = value;
					if ((value != null))
					{
						value.food_details.Add(this);
						this._Foot_id = value.Id;
					}
					else
					{
						this._Foot_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("food");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="size_food_food_detail", Storage="_size_food", ThisKey="Size_food_id", OtherKey="Id", IsForeignKey=true)]
		public size_food size_food
		{
			get
			{
				return this._size_food.Entity;
			}
			set
			{
				size_food previousValue = this._size_food.Entity;
				if (((previousValue != value) 
							|| (this._size_food.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._size_food.Entity = null;
						previousValue.food_details.Remove(this);
					}
					this._size_food.Entity = value;
					if ((value != null))
					{
						value.food_details.Add(this);
						this._Size_food_id = value.Id;
					}
					else
					{
						this._Size_food_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("size_food");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_bill_food_details(bill_food_detail entity)
		{
			this.SendPropertyChanging();
			entity.food_detail = this;
		}
		
		private void detach_bill_food_details(bill_food_detail entity)
		{
			this.SendPropertyChanging();
			entity.food_detail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.size_food")]
	public partial class size_food : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<food_detail> _food_details;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public size_food()
		{
			this._food_details = new EntitySet<food_detail>(new Action<food_detail>(this.attach_food_details), new Action<food_detail>(this.detach_food_details));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="size_food_food_detail", Storage="_food_details", ThisKey="Id", OtherKey="Size_food_id")]
		public EntitySet<food_detail> food_details
		{
			get
			{
				return this._food_details;
			}
			set
			{
				this._food_details.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_food_details(food_detail entity)
		{
			this.SendPropertyChanging();
			entity.size_food = this;
		}
		
		private void detach_food_details(food_detail entity)
		{
			this.SendPropertyChanging();
			entity.size_food = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.bill_food")]
	public partial class bill_food : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _Date_sale;
		
		private string _Account_id;
		
		private EntitySet<bill_food_detail> _bill_food_details;
		
		private EntityRef<account> _account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDate_saleChanging(System.DateTime value);
    partial void OnDate_saleChanged();
    partial void OnAccount_idChanging(string value);
    partial void OnAccount_idChanged();
    #endregion
		
		public bill_food()
		{
			this._bill_food_details = new EntitySet<bill_food_detail>(new Action<bill_food_detail>(this.attach_bill_food_details), new Action<bill_food_detail>(this.detach_bill_food_details));
			this._account = default(EntityRef<account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date_sale", DbType="Date NOT NULL")]
		public System.DateTime Date_sale
		{
			get
			{
				return this._Date_sale;
			}
			set
			{
				if ((this._Date_sale != value))
				{
					this.OnDate_saleChanging(value);
					this.SendPropertyChanging();
					this._Date_sale = value;
					this.SendPropertyChanged("Date_sale");
					this.OnDate_saleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_id", DbType="NVarChar(50)")]
		public string Account_id
		{
			get
			{
				return this._Account_id;
			}
			set
			{
				if ((this._Account_id != value))
				{
					if (this._account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccount_idChanging(value);
					this.SendPropertyChanging();
					this._Account_id = value;
					this.SendPropertyChanged("Account_id");
					this.OnAccount_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="bill_food_bill_food_detail", Storage="_bill_food_details", ThisKey="Id", OtherKey="Bill_food_id")]
		public EntitySet<bill_food_detail> bill_food_details
		{
			get
			{
				return this._bill_food_details;
			}
			set
			{
				this._bill_food_details.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="account_bill_food", Storage="_account", ThisKey="Account_id", OtherKey="Name_user", IsForeignKey=true)]
		public account account
		{
			get
			{
				return this._account.Entity;
			}
			set
			{
				account previousValue = this._account.Entity;
				if (((previousValue != value) 
							|| (this._account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._account.Entity = null;
						previousValue.bill_foods.Remove(this);
					}
					this._account.Entity = value;
					if ((value != null))
					{
						value.bill_foods.Add(this);
						this._Account_id = value.Name_user;
					}
					else
					{
						this._Account_id = default(string);
					}
					this.SendPropertyChanged("account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_bill_food_details(bill_food_detail entity)
		{
			this.SendPropertyChanging();
			entity.bill_food = this;
		}
		
		private void detach_bill_food_details(bill_food_detail entity)
		{
			this.SendPropertyChanging();
			entity.bill_food = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.movie")]
	public partial class movie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<int> _Movie_length;
		
		private System.DateTime _Movie_release_date;
		
		private string _Production_comapany;
		
		private System.Nullable<int> _Status;
		
		private System.Nullable<int> _Category_movie_id;
		
		private EntitySet<slot_show> _slot_shows;
		
		private EntityRef<category_movie> _category_movie;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMovie_lengthChanging(System.Nullable<int> value);
    partial void OnMovie_lengthChanged();
    partial void OnMovie_release_dateChanging(System.DateTime value);
    partial void OnMovie_release_dateChanged();
    partial void OnProduction_comapanyChanging(string value);
    partial void OnProduction_comapanyChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnCategory_movie_idChanging(System.Nullable<int> value);
    partial void OnCategory_movie_idChanged();
    #endregion
		
		public movie()
		{
			this._slot_shows = new EntitySet<slot_show>(new Action<slot_show>(this.attach_slot_shows), new Action<slot_show>(this.detach_slot_shows));
			this._category_movie = default(EntityRef<category_movie>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Movie_length", DbType="Int")]
		public System.Nullable<int> Movie_length
		{
			get
			{
				return this._Movie_length;
			}
			set
			{
				if ((this._Movie_length != value))
				{
					this.OnMovie_lengthChanging(value);
					this.SendPropertyChanging();
					this._Movie_length = value;
					this.SendPropertyChanged("Movie_length");
					this.OnMovie_lengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Movie_release_date", DbType="Date NOT NULL")]
		public System.DateTime Movie_release_date
		{
			get
			{
				return this._Movie_release_date;
			}
			set
			{
				if ((this._Movie_release_date != value))
				{
					this.OnMovie_release_dateChanging(value);
					this.SendPropertyChanging();
					this._Movie_release_date = value;
					this.SendPropertyChanged("Movie_release_date");
					this.OnMovie_release_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Production_comapany", DbType="NVarChar(50)")]
		public string Production_comapany
		{
			get
			{
				return this._Production_comapany;
			}
			set
			{
				if ((this._Production_comapany != value))
				{
					this.OnProduction_comapanyChanging(value);
					this.SendPropertyChanging();
					this._Production_comapany = value;
					this.SendPropertyChanged("Production_comapany");
					this.OnProduction_comapanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category_movie_id", DbType="Int")]
		public System.Nullable<int> Category_movie_id
		{
			get
			{
				return this._Category_movie_id;
			}
			set
			{
				if ((this._Category_movie_id != value))
				{
					if (this._category_movie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategory_movie_idChanging(value);
					this.SendPropertyChanging();
					this._Category_movie_id = value;
					this.SendPropertyChanged("Category_movie_id");
					this.OnCategory_movie_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="movie_slot_show", Storage="_slot_shows", ThisKey="Id", OtherKey="Movie_id")]
		public EntitySet<slot_show> slot_shows
		{
			get
			{
				return this._slot_shows;
			}
			set
			{
				this._slot_shows.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="category_movie_movie", Storage="_category_movie", ThisKey="Category_movie_id", OtherKey="Id", IsForeignKey=true)]
		public category_movie category_movie
		{
			get
			{
				return this._category_movie.Entity;
			}
			set
			{
				category_movie previousValue = this._category_movie.Entity;
				if (((previousValue != value) 
							|| (this._category_movie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._category_movie.Entity = null;
						previousValue.movies.Remove(this);
					}
					this._category_movie.Entity = value;
					if ((value != null))
					{
						value.movies.Add(this);
						this._Category_movie_id = value.Id;
					}
					else
					{
						this._Category_movie_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("category_movie");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_slot_shows(slot_show entity)
		{
			this.SendPropertyChanging();
			entity.movie = this;
		}
		
		private void detach_slot_shows(slot_show entity)
		{
			this.SendPropertyChanging();
			entity.movie = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.cinema_room")]
	public partial class cinema_room : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _Quantity_row;
		
		private int _Quantity_Column;
		
		private int _Quantity_seat;
		
		private System.Nullable<int> _RowVip;
		
		private System.Nullable<int> _ColVip;
		
		private System.Nullable<int> _RowDoubleSeat;
		
		private EntitySet<slot_show> _slot_shows;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnQuantity_rowChanging(int value);
    partial void OnQuantity_rowChanged();
    partial void OnQuantity_ColumnChanging(int value);
    partial void OnQuantity_ColumnChanged();
    partial void OnQuantity_seatChanging(int value);
    partial void OnQuantity_seatChanged();
    partial void OnRowVipChanging(System.Nullable<int> value);
    partial void OnRowVipChanged();
    partial void OnColVipChanging(System.Nullable<int> value);
    partial void OnColVipChanged();
    partial void OnRowDoubleSeatChanging(System.Nullable<int> value);
    partial void OnRowDoubleSeatChanged();
    #endregion
		
		public cinema_room()
		{
			this._slot_shows = new EntitySet<slot_show>(new Action<slot_show>(this.attach_slot_shows), new Action<slot_show>(this.detach_slot_shows));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity_row", DbType="Int NOT NULL")]
		public int Quantity_row
		{
			get
			{
				return this._Quantity_row;
			}
			set
			{
				if ((this._Quantity_row != value))
				{
					this.OnQuantity_rowChanging(value);
					this.SendPropertyChanging();
					this._Quantity_row = value;
					this.SendPropertyChanged("Quantity_row");
					this.OnQuantity_rowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity_Column", DbType="Int NOT NULL")]
		public int Quantity_Column
		{
			get
			{
				return this._Quantity_Column;
			}
			set
			{
				if ((this._Quantity_Column != value))
				{
					this.OnQuantity_ColumnChanging(value);
					this.SendPropertyChanging();
					this._Quantity_Column = value;
					this.SendPropertyChanged("Quantity_Column");
					this.OnQuantity_ColumnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity_seat", DbType="Int NOT NULL")]
		public int Quantity_seat
		{
			get
			{
				return this._Quantity_seat;
			}
			set
			{
				if ((this._Quantity_seat != value))
				{
					this.OnQuantity_seatChanging(value);
					this.SendPropertyChanging();
					this._Quantity_seat = value;
					this.SendPropertyChanged("Quantity_seat");
					this.OnQuantity_seatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowVip", DbType="Int")]
		public System.Nullable<int> RowVip
		{
			get
			{
				return this._RowVip;
			}
			set
			{
				if ((this._RowVip != value))
				{
					this.OnRowVipChanging(value);
					this.SendPropertyChanging();
					this._RowVip = value;
					this.SendPropertyChanged("RowVip");
					this.OnRowVipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColVip", DbType="Int")]
		public System.Nullable<int> ColVip
		{
			get
			{
				return this._ColVip;
			}
			set
			{
				if ((this._ColVip != value))
				{
					this.OnColVipChanging(value);
					this.SendPropertyChanging();
					this._ColVip = value;
					this.SendPropertyChanged("ColVip");
					this.OnColVipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowDoubleSeat", DbType="Int")]
		public System.Nullable<int> RowDoubleSeat
		{
			get
			{
				return this._RowDoubleSeat;
			}
			set
			{
				if ((this._RowDoubleSeat != value))
				{
					this.OnRowDoubleSeatChanging(value);
					this.SendPropertyChanging();
					this._RowDoubleSeat = value;
					this.SendPropertyChanged("RowDoubleSeat");
					this.OnRowDoubleSeatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cinema_room_slot_show", Storage="_slot_shows", ThisKey="Id", OtherKey="Cinema_room_id")]
		public EntitySet<slot_show> slot_shows
		{
			get
			{
				return this._slot_shows;
			}
			set
			{
				this._slot_shows.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_slot_shows(slot_show entity)
		{
			this.SendPropertyChanging();
			entity.cinema_room = this;
		}
		
		private void detach_slot_shows(slot_show entity)
		{
			this.SendPropertyChanging();
			entity.cinema_room = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.category_seat")]
	public partial class category_seat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<double> _Subcharge;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSubchargeChanging(System.Nullable<double> value);
    partial void OnSubchargeChanged();
    #endregion
		
		public category_seat()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subcharge", DbType="Float")]
		public System.Nullable<double> Subcharge
		{
			get
			{
				return this._Subcharge;
			}
			set
			{
				if ((this._Subcharge != value))
				{
					this.OnSubchargeChanging(value);
					this.SendPropertyChanging();
					this._Subcharge = value;
					this.SendPropertyChanged("Subcharge");
					this.OnSubchargeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ticket_sale")]
	public partial class ticket_sale : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _Date_sale;
		
		private System.Nullable<double> _Total_price;
		
		private System.Nullable<int> _Slot_show_id;
		
		private string _Account_id;
		
		private string _NameSeat;
		
		private EntityRef<account> _account;
		
		private EntityRef<slot_show> _slot_show;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDate_saleChanging(System.DateTime value);
    partial void OnDate_saleChanged();
    partial void OnTotal_priceChanging(System.Nullable<double> value);
    partial void OnTotal_priceChanged();
    partial void OnSlot_show_idChanging(System.Nullable<int> value);
    partial void OnSlot_show_idChanged();
    partial void OnAccount_idChanging(string value);
    partial void OnAccount_idChanged();
    partial void OnNameSeatChanging(string value);
    partial void OnNameSeatChanged();
    #endregion
		
		public ticket_sale()
		{
			this._account = default(EntityRef<account>);
			this._slot_show = default(EntityRef<slot_show>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date_sale", DbType="Date NOT NULL")]
		public System.DateTime Date_sale
		{
			get
			{
				return this._Date_sale;
			}
			set
			{
				if ((this._Date_sale != value))
				{
					this.OnDate_saleChanging(value);
					this.SendPropertyChanging();
					this._Date_sale = value;
					this.SendPropertyChanged("Date_sale");
					this.OnDate_saleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total_price", DbType="Float")]
		public System.Nullable<double> Total_price
		{
			get
			{
				return this._Total_price;
			}
			set
			{
				if ((this._Total_price != value))
				{
					this.OnTotal_priceChanging(value);
					this.SendPropertyChanging();
					this._Total_price = value;
					this.SendPropertyChanged("Total_price");
					this.OnTotal_priceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Slot_show_id", DbType="Int")]
		public System.Nullable<int> Slot_show_id
		{
			get
			{
				return this._Slot_show_id;
			}
			set
			{
				if ((this._Slot_show_id != value))
				{
					if (this._slot_show.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSlot_show_idChanging(value);
					this.SendPropertyChanging();
					this._Slot_show_id = value;
					this.SendPropertyChanged("Slot_show_id");
					this.OnSlot_show_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_id", DbType="NVarChar(50)")]
		public string Account_id
		{
			get
			{
				return this._Account_id;
			}
			set
			{
				if ((this._Account_id != value))
				{
					if (this._account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccount_idChanging(value);
					this.SendPropertyChanging();
					this._Account_id = value;
					this.SendPropertyChanged("Account_id");
					this.OnAccount_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameSeat", DbType="NVarChar(10)")]
		public string NameSeat
		{
			get
			{
				return this._NameSeat;
			}
			set
			{
				if ((this._NameSeat != value))
				{
					this.OnNameSeatChanging(value);
					this.SendPropertyChanging();
					this._NameSeat = value;
					this.SendPropertyChanged("NameSeat");
					this.OnNameSeatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="account_ticket_sale", Storage="_account", ThisKey="Account_id", OtherKey="Name_user", IsForeignKey=true)]
		public account account
		{
			get
			{
				return this._account.Entity;
			}
			set
			{
				account previousValue = this._account.Entity;
				if (((previousValue != value) 
							|| (this._account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._account.Entity = null;
						previousValue.ticket_sales.Remove(this);
					}
					this._account.Entity = value;
					if ((value != null))
					{
						value.ticket_sales.Add(this);
						this._Account_id = value.Name_user;
					}
					else
					{
						this._Account_id = default(string);
					}
					this.SendPropertyChanged("account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="slot_show_ticket_sale", Storage="_slot_show", ThisKey="Slot_show_id", OtherKey="Id", IsForeignKey=true)]
		public slot_show slot_show
		{
			get
			{
				return this._slot_show.Entity;
			}
			set
			{
				slot_show previousValue = this._slot_show.Entity;
				if (((previousValue != value) 
							|| (this._slot_show.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._slot_show.Entity = null;
						previousValue.ticket_sales.Remove(this);
					}
					this._slot_show.Entity = value;
					if ((value != null))
					{
						value.ticket_sales.Add(this);
						this._Slot_show_id = value.Id;
					}
					else
					{
						this._Slot_show_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("slot_show");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class p_tkTicketByYearResult
	{
		
		private System.Nullable<int> _Month;
		
		private System.Nullable<int> _ve;
		
		private System.Nullable<double> _totalPrice;
		
		public p_tkTicketByYearResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month", DbType="Int")]
		public System.Nullable<int> Month
		{
			get
			{
				return this._Month;
			}
			set
			{
				if ((this._Month != value))
				{
					this._Month = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ve", DbType="Int")]
		public System.Nullable<int> ve
		{
			get
			{
				return this._ve;
			}
			set
			{
				if ((this._ve != value))
				{
					this._ve = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_totalPrice", DbType="Float")]
		public System.Nullable<double> totalPrice
		{
			get
			{
				return this._totalPrice;
			}
			set
			{
				if ((this._totalPrice != value))
				{
					this._totalPrice = value;
				}
			}
		}
	}
	
	public partial class p_tkFoodbyYearResult
	{
		
		private System.Nullable<int> _Month;
		
		private System.Nullable<double> _Total_price;
		
		public p_tkFoodbyYearResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month", DbType="Int")]
		public System.Nullable<int> Month
		{
			get
			{
				return this._Month;
			}
			set
			{
				if ((this._Month != value))
				{
					this._Month = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total_price", DbType="Float")]
		public System.Nullable<double> Total_price
		{
			get
			{
				return this._Total_price;
			}
			set
			{
				if ((this._Total_price != value))
				{
					this._Total_price = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
